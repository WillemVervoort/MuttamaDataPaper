#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
# export a data frame with all points stacked
#browser()
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg, Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
x1
length(x1)
np_list[[1]]
str(np_list[[1]])
np_list <- sapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
#browser()
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
browser()
diamond_point <- function(x1, x2, y1, y2, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y2 - y1) + 0.5*(x2 + x1)
y_d <- 0.5*(y2 + y1) + h*(x2 + x1)
return(tibble(observation = name, x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
np_list <- sapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
#npoints <- bind_rows(np_list)
# export a data frame with all points stacked
browser()
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg, Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
str(np_list)
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
#browser()
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
#browser()
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an + x_cat)
return(tibble(observation = name, x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
#npoints <- bind_rows(np_list)
# export a data frame with all points stacked
browser()
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg, Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
View(np_list)
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
#browser()
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
#browser()
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an + x_cat)
return(tibble(observation = name, x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
browser()
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
# export a data frame with all points stacked
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg, Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
length(x1)
i <- 1
diamond_point(x1[i], x2[i], y1[i], y2[i])
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
#browser()
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
#browser()
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an + x_cat)
return(tibble(x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
browser()
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
npoints <- npoints %>%
mutate(observation = name)
# export a data frame with all points stacked
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg, Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
ggplot_piper(off_set = 200, a = 1) + geom_point(aes((x+100),(y), colour=factor(observation)), size=4, data=test)
test %>%
filter(type == "anions") %>%
reframe(x_r = range(x, na.rm = T),
y_r = range(y, na.rm = T))
ggplot(test %>% filter(type == "anions"), aes(x,y)) + geom_point()
ggplot(test %>% filter(type == "cations"), aes(x,y)) + geom_point()
ggplot(test %>% filter(type == "anions"), aes(x,y)) + geom_point()
range(Muttama_data$ion_balance, na.rm = T)
ggplot(test %>% filter(type == "cations"), aes(x,y)) + geom_point()
test %>%
filter(type == "cations") %>%
reframe(x_r = range(x, na.rm = T),
y_r = range(y, na.rm = T))
ggplot(test %>% filter(type == "cations"), aes(x+1,y)) + geom_point()
ggplot(test %>% filter(type == "cations"), aes(x+100,y)) + geom_point()
View(Muttama_data)
# input data need to be in % divide by sums
piper_data <- tibble(Ca = Muttama_data$ca_meq_l/Muttama_data$cation_sum,
Mg = Muttama_data$mg_meq_l/Muttama_data$cation_sum,
Cl = Muttama_data$cl_meq_l/Muttama_data$anion_sum,
SO4 = Muttama_data$so4_meq_l/Muttama_data$anion_sum,
name = Muttama_data$gw_or_sw,
ion_balance = Muttama_data$ion_balance)
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
# data for ions needs to be in %
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
# page 4
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
# Peeters equation page 4
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an + x_cat)
return(tibble(x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
#browser()
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
npoints <- npoints %>%
mutate(observation = name)
# export a data frame with all points stacked
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
# data needs to be in %
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
# page 4
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
# Peeters equation page 4
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an + x_cat)
return(tibble(x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
#browser()
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
npoints <- npoints %>%
mutate(observation = name)
# export a data frame with all points stacked
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 50)
ggplot_piper(off_set = 200, a = 1) + geom_point(aes((x+120),(y), colour=factor(observation)), size=4, data=test)
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 0)
ggplot_piper(off_set = 0, a = 1) + geom_point(aes((x),(y), colour=factor(observation)), size=4, data=test)
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
# data needs to be in %
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
# page 4
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (1 - Ca - (Mg/2))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (Cl + SO4/2)
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
# Peeters equation page 4
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an - x_cat)
return(tibble(x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
#browser()
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
npoints <- npoints %>%
mutate(observation = name)
# export a data frame with all points stacked
data.frame(bind_rows(cations, anions, npoints))
}
View(Muttama_data)
cation_sum <-  Muttama_data$ca_meq_l +  Muttama_data$mg_meq_l +
Muttama_data$na_meq_l +  Muttama_data$k_meq_l
anion_sum <- Muttama_data$cl_meq_l + Muttama_data$hco3_meq_l +
Muttama_data$so4_meq_l
anion_sum
piper_data <- tibble(Ca = Muttama_data$ca_meq_l/cation_sum,
Mg = Muttama_data$mg_meq_l/cation_sum,
Cl = Muttama_data$cl_meq_l/anion_sum,
SO4 = Muttama_data$so4_meq_l/anion_sum,
name = Muttama_data$gw_or_sw,
ion_balance = Muttama_data$ion_balance)
View(piper_data)
#' adapted by Willem Vervoort
#' @param Mg vector of Magnesium data in %
#' @param Ca vector of Calcium data in %
#' @param Cl vector of Chloride data in %
#' @param SO4 vector of Sulfate data in %
#' @param name names of the data points
#' @example
#'
#' @export
#'
transform_piper_data <- function(Mg, Ca, Cl, SO4, offset = 25, name=NULL){
if(is.null(name)){
name = 1:length(Mg)
}
# data needs to be in %
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
# page 4
y1 <- Mg * 0.5*tan(pi/3)
x1 <- (2*(1 - Ca) + (Mg))
y2 <- SO4*0.5*tan(pi/3)
x2 <- 1 + 2*offset + (2*Cl + SO4)
cations <- tibble(observation = name, x = x1, y = y1, type = "cations")
anions <- tibble(observation = name, x = x2, y = y2, type = "anions")
# Peeters equation page 4
diamond_point <- function(x_cat, x_an, y_cat, y_an, h = 0.5*tan(pi/3)) {
x_d <- 1/(4*h)*(y_an - y_cat) + 0.5*(x_an + x_cat)
y_d <- 0.5*(y_an + y_cat) + h*(x_an - x_cat)
return(tibble(x = x_d, y = y_d, type = "diamond"))
}
# new_point <- function(x1, x2, y1, y2, grad=tan(pi/3)){
#   b1 <- y1-(grad*x1)
#   b2 <- y2-(-grad*x2)
#   M <- matrix(c(grad, -grad, -1,-1), ncol=2)
#   intercepts <- as.matrix(c(b1,b2))
#   t_mat <- -solve(M) %*% intercepts
#   data.frame(x=t_mat[1,1], y=t_mat[2,1])
# }
# calculate all points in the diamond
#browser()
np_list <- lapply(1:length(x1), function(i) diamond_point(x1[i], x2[i], y1[i], y2[i]))
npoints <- bind_rows(np_list)
npoints <- npoints %>%
mutate(observation = name)
# export a data frame with all points stacked
data.frame(bind_rows(cations, anions, npoints))
}
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 0)
View(test)
ggplot_piper(off_set = 0, a = 1) + geom_point(aes((100*x),(100*y), colour=factor(observation)), size=4, data=test)
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 20)
ggplot_piper(off_set = 0, a = 1) + geom_point(aes((100*x),(100*y), colour=factor(observation)), size=4, data=test)
test <- transform_piper_data(Mg = piper_data$Mg,
Ca = piper_data$Ca,
Cl = piper_data$Cl, SO4 = piper_data$SO4,
name = piper_data$name, offset = 1)
ggplot_piper(off_set = 0, a = 1) + geom_point(aes((100*x),(100*y), colour=factor(observation)), size=4, data=test)
ggplot_piper(off_set = 0, a = 1) + geom_point(aes((10*x),(100\*y), colour=factor(observation)), size=4, data=test)
ggplot_piper(off_set = 0, a = 1) + geom_point(aes((10*x),(10*y), colour=factor(observation)), size=4, data=test)
?geom_segment
df <- expand.grid(x = 1:10, y=1:10)
set.seed(1)
df$angle <- runif(100, 0, 2*pi)
df$speed <- runif(100, 0, sqrt(0.1 * df$x))
ggplot(df, aes(x, y)) +
geom_point() +
geom_spoke(aes(angle = angle), radius = 0.5)
df <- expand.grid(x = 1:10, y=1:10)
set.seed(1)
df$angle <- runif(100, 0, 2*pi)
df$speed <- runif(100, 0, sqrt(0.1 * df$x))
ggplot(df, aes(x, y)) +
geom_point() +
geom_spoke(aes(angle = angle), radius = 10)
# data needs to be in %
#browser()
# following Peeters (2014) https://ngwa.onlinelibrary.wiley.com/doi/abs/10.1111/gwat.12118
# page 4
y1 <- Mg * 0.5*
x1 <- (2*(1 - Ca) + (Mg))
tan(pi/3)
50^2 + (100*tan(pi/3))^2
sqrt(50^2 + (100*tan(pi/3))^2)
0.2*sqrt(50^2 + (100*tan(pi/3))^2)
sqrt(50^2 + (50*tan(pi/3))^2)
0.2*sqrt(50^2 + (50*tan(pi/3))^2)
h = 0.5*tan(pi/3)
x1 = seq(20,80, by = 20)
x2 = 0.5*x1
y2 = x1*h
50*h
100*h
120*h
220*h
